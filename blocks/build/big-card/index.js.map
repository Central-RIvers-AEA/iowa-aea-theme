{"version":3,"file":"big-card/index.js","mappings":"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;;;;;;;ACAA,4C;;;;;;;;;;ACAA,sC;;;;;;;;;;ACAA,2C;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,E;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA,4G;;;;;UEjDA;UACA;UACA;UACA;UACA","sources":["webpack://interactive-map/./src/big-card/edit.js","webpack://interactive-map/./src/big-card/editor.scss","webpack://interactive-map/./src/big-card/index.js","webpack://interactive-map/./src/big-card/save.js","webpack://interactive-map/./src/big-card/style.scss","webpack://interactive-map/external window [\"wp\",\"blockEditor\"]","webpack://interactive-map/external window [\"wp\",\"blocks\"]","webpack://interactive-map/external window [\"wp\",\"components\"]","webpack://interactive-map/external window [\"wp\",\"i18n\"]","webpack://interactive-map/external window \"ReactJSXRuntime\"","webpack://interactive-map/webpack/bootstrap","webpack://interactive-map/webpack/runtime/chunk loaded","webpack://interactive-map/webpack/runtime/compat get default export","webpack://interactive-map/webpack/runtime/define property getters","webpack://interactive-map/webpack/runtime/hasOwnProperty shorthand","webpack://interactive-map/webpack/runtime/make namespace object","webpack://interactive-map/webpack/runtime/jsonp chunk loading","webpack://interactive-map/webpack/before-startup","webpack://interactive-map/webpack/startup","webpack://interactive-map/webpack/after-startup"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { useBlockProps, InspectorControls, withColorContext, useSetting } from '@wordpress/block-editor';\nimport { PanelBody, ToggleControl, SelectControl, TextControl, ColorPalette } from '@wordpress/components';\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * Those files can contain any CSS code that gets applied to the editor.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport './editor.scss';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @return {Element} Element to render.\n */\nexport default function Edit(props) {\n  const { attributes, setAttributes } = props;\n  const { tabNumber, backgroundColor } = attributes;\n\n  // Get theme color palette\n  const colorPalette = useSetting('color.palette') || [\n    { name: 'Primary', slug: 'primary', color: '#9b2246' },\n    { name: 'Secondary', slug: 'secondary', color: '#f0b52b' },\n    { name: 'Alt One', slug: 'alt-one', color: '#001777' },\n    { name: 'Alt Two', slug: 'alt-two', color: '#582c63' },\n    { name: 'Alt Three', slug: 'alt-three', color: '#00826e' },\n    { name: 'Alt Four', slug: 'alt-four', color: '#d17829' },\n    { name: 'Background Color', slug: 'background-color', color: '#ffffff' },\n    { name: 'Base', slug: 'base', color: '#FFFFFF' },\n    { name: 'Text Color', slug: 'text-color', color: '#333333' }\n  ];\n\n  // SVG Options\n  let svgs = [\n    { label: __('Apple Book', 'big-card'), value: '<svg width=\"63\" height=\"74\" viewBox=\"0 0 63 74\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_712_513)\"><path d=\"M28.7266 56.3986H15.5693V72.6753H28.7266V56.3986Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M61.6938 72.6753H4.63247C0.200268 68.18 0.200268 60.8939 4.63247 56.3986H61.7025C57.2703 60.8939 57.2703 68.18 61.7025 72.6753H61.6938Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M23.2582 23.6952C21.0987 23.598 18.8347 23.7129 16.8929 26.5036C14.3764 30.1158 15.8392 35.1145 17.9987 39.071\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M41.1263 1.59851C41.1263 1.59851 35.684 0.105973 31.7395 4.10669C27.9603 7.9396 30.2853 12.5939 30.2853 12.5939C30.2853 12.5939 34.8742 14.9519 38.6534 11.119C42.5979 7.11827 41.1263 1.59851 41.1263 1.59851Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M31.426 18.2991C31.426 14.0246 29.3797 8.1339 22.8054 4.39813\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M51.68 22.2645C45.2015 12.9648 36.5983 18.3256 31.426 18.3256C26.2536 18.3256 17.6505 12.9648 11.1719 22.2645C5.46842 30.4602 12.095 42.9834 17.1715 49.4305C21.5341 54.9767 25.0868 56.381 27.673 56.3898H27.6991C27.7688 56.3898 27.8384 56.3898 27.8994 56.3898H34.9439C35.0136 56.3898 35.0832 56.3898 35.1442 56.3898H35.1703C37.7565 56.381 41.3092 54.9767 45.6717 49.4305C50.7396 42.9834 57.3748 30.4514 51.6713 22.2645H51.68Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_712_513\"><rect width=\"63\" height=\"74\" fill=\"white\"/></clipPath></defs></svg>'},\n    { label: __('Grad Cap', 'big-card'), value: '<svg width=\"84\" height=\"64\" viewBox=\"0 0 84 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_712_520)\"><path d=\"M68.1207 21.9937V48.9607C68.1207 50.2785 67.1288 51.9788 65.8825 52.6674C50.9951 60.7864 32.9963 60.7864 18.109 52.6674C16.8627 51.9788 15.8708 50.27 15.8708 48.9607C15.8708 39.9745 15.8708 30.9883 15.8708 21.9937\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M81.7957 15.3369C83.0335 15.7874 83.0335 16.5356 81.7957 16.9862L44.2551 30.7077C43.0174 31.1583 40.9826 31.1583 39.7364 30.7077L2.20428 16.9947C0.966493 16.5441 0.966493 15.7959 2.20428 15.3454L39.7449 1.61528C40.9826 1.1647 43.0174 1.1647 44.2636 1.61528L81.8042 15.3369H81.7957Z\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M42 16.1616L60.8127 24.6632V62.7248\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_712_520\"><rect width=\"84\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>' },\n    { label: __('Certificate', 'big-card'), value: '<svg width=\"74\" height=\"69\" viewBox=\"0 0 74 69\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_712_524)\"><path d=\"M20.9004 20.2006H53.0996\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M24.7943 45.8178H3.60267C2.30471 45.8178 1.24805 44.7577 1.24805 43.4739V3.58627C1.24805 2.29423 2.31303 1.24237 3.60267 1.24237H70.389C71.687 1.24237 72.7437 2.30251 72.7437 3.58627V43.4656C72.7437 44.7577 71.6787 45.8095 70.389 45.8095H49.2058\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M49.2557 38.5542H58.1666C58.1666 34.5456 61.4365 31.2906 65.4635 31.2906V15.7613C61.4365 15.7613 58.1666 12.5063 58.1666 8.49768H15.8334C15.8334 12.5063 12.5719 15.7613 8.53656 15.7613V31.2906C12.5635 31.2906 15.8334 34.5456 15.8334 38.5542H24.7443\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M37 54.8124C44.049 54.8124 49.7632 49.1241 49.7632 42.1073C49.7632 35.0905 44.049 29.4022 37 29.4022C29.9511 29.4022 24.2368 35.0905 24.2368 42.1073C24.2368 49.1241 29.9511 54.8124 37 54.8124Z\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M37 49.0396C40.8462 49.0396 43.9641 45.9359 43.9641 42.1073C43.9641 38.2787 40.8462 35.175 37 35.175C33.1539 35.175 30.036 38.2787 30.036 42.1073C30.036 45.9359 33.1539 49.0396 37 49.0396Z\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M44.7544 52.2034C45.6031 55.359 47.9411 62.5315 52.3342 65.7367L44.6712 63.1444L42.8907 67.7659C42.8907 67.7659 38.7972 63.691 37.208 54.8206\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M29.2539 52.2034C28.4052 55.359 26.0673 62.5315 21.6742 65.7367L29.3371 63.1444L31.1176 67.7659C31.1176 67.7659 35.2112 63.691 36.8003 54.8206\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_712_524\"><rect width=\"74\" height=\"69\" fill=\"white\"/></clipPath></defs></svg>' },\n    { label: __('Computer', 'big-card'), value: '<svg width=\"82\" height=\"68\" viewBox=\"0 0 82 68\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_731_27)\"><path d=\"M76.9225 1.32983H5.07755C3.00484 1.32983 1.32458 3.01679 1.32458 5.09776V49.3022C1.32458 51.3832 3.00484 53.0701 5.07755 53.0701H76.9225C78.9952 53.0701 80.6754 51.3832 80.6754 49.3022V5.09776C80.6754 3.01679 78.9952 1.32983 76.9225 1.32983Z\"  stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M33.9356 53.0701C33.9356 53.0701 33.5382 54.7635 33.0525 56.8381C32.5668 58.9126 30.6506 60.606 28.7962 60.606H25.423\"  stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M48.0555 53.0701C48.0555 53.0701 48.4529 54.7635 48.9386 56.8381C49.4243 58.9126 51.3405 60.606 53.1949 60.606H56.5681\"  stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M59.2261 60.6149H22.7738V66.679H59.2261V60.6149Z\"  stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M26.5442 36.4246C25.5927 37.3775 25.5927 38.9241 26.5442 39.8769L29.5644 42.901C30.5159 43.8539 32.0604 43.8539 33.012 42.901L53.5599 22.3257L55.7526 13.6536L47.0921 15.8493L26.5442 36.4246Z\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M35.7425 40.1807L29.2748 33.7043\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M38.2248 37.6951L31.7571 31.2048\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M53.5599 22.3394L47.0922 15.863\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M34.9978 34.4499L50.3191 19.0944\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M52.8842 14.3855L55.0355 16.5259\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M30.1297 26.3303L29.6608 28.084L29.1919 26.3303C28.792 24.8389 27.6198 23.6652 26.1304 23.2647L24.379 22.7952L26.1304 22.3257C27.6198 21.9252 28.792 20.7515 29.1919 19.2601L29.6608 17.5063L30.1297 19.2601C30.5296 20.7515 31.7018 21.9252 33.1912 22.3257L34.9426 22.7952L33.1912 23.2647C31.7018 23.6652 30.5296 24.8389 30.1297 26.3303Z\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M51.4223 40.885L51.2431 41.5616L51.0638 40.885C50.5949 39.1588 49.2572 37.8194 47.5472 37.3637L46.8715 37.1841L47.5472 37.0046C49.271 36.5351 50.6087 35.1957 51.0638 33.4833L51.2431 32.8067L51.4223 33.4833C51.8912 35.2095 53.2289 36.5489 54.9389 37.0046L55.6147 37.1841L54.9389 37.3637C53.2151 37.8332 51.8774 39.1726 51.4223 40.885Z\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M38.3902 17.1197V17.1749L38.3626 17.1197C37.9489 15.6007 36.7629 14.4131 35.246 13.9988H35.1908L35.246 13.9712C36.7629 13.557 37.9489 12.3694 38.3626 10.8504V10.7952L38.3902 10.8504C38.8039 12.3694 39.9899 13.557 41.5069 13.9712H41.562L41.5069 13.9988C39.9899 14.4131 38.8039 15.6007 38.3902 17.1197Z\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_731_27\"><rect width=\"82\" height=\"68\" fill=\"white\"/></clipPath></defs></svg>' },\n    { label: __('Empty Computer', 'big-card'), value: '<svg width=\"82\" height=\"68\" viewBox=\"0 0 82 68\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_716_70)\"><path d=\"M76.9225 1.32983H5.07755C3.00484 1.32983 1.32458 3.01679 1.32458 5.09776V49.3022C1.32458 51.3832 3.00484 53.0701 5.07755 53.0701H76.9225C78.9952 53.0701 80.6754 51.3832 80.6754 49.3022V5.09776C80.6754 3.01679 78.9952 1.32983 76.9225 1.32983Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M33.9356 53.0702C33.9356 53.0702 33.5382 54.7635 33.0525 56.8381C32.5668 58.9127 30.6506 60.606 28.7962 60.606H25.423\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M48.0555 53.0702C48.0555 53.0702 48.4529 54.7635 48.9386 56.8381C49.4243 58.9127 51.3405 60.606 53.1949 60.606H56.5681\" stroke-width=\"3\" stroke-linejoin=\"round\"/><path d=\"M59.2261 60.6149H22.7738V66.679H59.2261V60.6149Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_716_70\"><rect width=\"82\" height=\"68\" fill=\"white\"/></clipPath></defs></svg>' },\n    { label: __('Speech Bubble', 'big-card'), value: '<svg width=\"71\" height=\"59\" viewBox=\"0 0 71 59\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M43.4962 2H26.4937C12.4722 2 1 12.1216 1 24.5012C1 36.872 12.4722 47.0024 26.5038 47.0024H41.8L57.6683 57V43.1769C64.4934 39.1301 69 32.2584 69 24.5012C69 12.1304 57.5278 2 43.4962 2Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M24.08 26.32C24.8588 26.32 25.49 25.6887 25.49 24.91C25.49 24.1313 24.8588 23.5 24.08 23.5C23.3013 23.5 22.67 24.1313 22.67 24.91C22.67 25.6887 23.3013 26.32 24.08 26.32Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M35.3701 26.32C36.1488 26.32 36.7801 25.6887 36.7801 24.91C36.7801 24.1313 36.1488 23.5 35.3701 23.5C34.5914 23.5 33.9601 24.1313 33.9601 24.91C33.9601 25.6887 34.5914 26.32 35.3701 26.32Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M46.67 26.32C47.4487 26.32 48.08 25.6887 48.08 24.91C48.08 24.1313 47.4487 23.5 46.67 23.5C45.8913 23.5 45.26 24.1313 45.26 24.91C45.26 25.6887 45.8913 26.32 46.67 26.32Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'},\n    { label: __('Plus', 'big-card'), value: '<svg width=\"58\" height=\"58\" viewBox=\"0 0 58 58\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M29 56.1965C44.0202 56.1965 56.1965 44.0202 56.1965 29C56.1965 13.9798 44.0202 1.80347 29 1.80347C13.9798 1.80347 1.80347 13.9798 1.80347 29C1.80347 44.0202 13.9798 56.1965 29 56.1965Z\" stroke-width=\"3\" stroke-miterlimit=\"10\"/><path d=\"M29 12.6965V45.3035\" stroke-width=\"3\" stroke-miterlimit=\"10\" stroke-linecap=\"round\"/><path d=\"M45.3035 29H12.6965\" stroke-width=\"3\" stroke-miterlimit=\"10\" stroke-linecap=\"round\"/></svg>' },\n    { label: __('Cart', 'big-card'), value: '<svg width=\"89\" height=\"70\" viewBox=\"0 0 89 70\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_718_108)\"><path d=\"M34.16 68.37C37.054 68.37 39.4 66.024 39.4 63.13C39.4 60.236 37.054 57.89 34.16 57.89C31.266 57.89 28.92 60.236 28.92 63.13C28.92 66.024 31.266 68.37 34.16 68.37Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M66.51 68.37C69.404 68.37 71.75 66.024 71.75 63.13C71.75 60.236 69.404 57.89 66.51 57.89C63.616 57.89 61.27 60.236 61.27 63.13C61.27 66.024 63.616 68.37 66.51 68.37Z\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M17.14 12.99H86.73L77.67 41.46L25.46 44.99C22.92 45.16 21.21 47.67 21.98 50.1C22.5 51.73 24.01 52.84 25.72 52.84H76.59\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M1.5 1.5H9.48C11.87 1.5 13.98 3.05 14.7 5.32L27.27 44.83\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g><defs><clipPath id=\"clip0_718_108\"><rect width=\"88.23\" height=\"69.87\" fill=\"white\"/></clipPath></defs></svg>' },\n    { label: __('Hand', 'big-card'), value: '<svg width=\"93\" height=\"79\" viewBox=\"0 0 93 79\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_719_114)\"><mask id=\"path-1-outside-1_719_114\" maskUnits=\"userSpaceOnUse\" x=\"-1\" y=\"-1\" width=\"95\" height=\"81\" fill=\"black\"><rect fill=\"white\" x=\"-1\" y=\"-1\" width=\"95\" height=\"81\"/><path d=\"M52.3796 0C55.6001 0 58.6849 0.651978 61.4982 1.83292C64.4226 3.06306 67.0508 4.85908 69.2472 7.09794C71.4435 9.32451 73.208 11.9939 74.4173 14.9709C75.5772 17.8248 76.2311 20.9617 76.2311 24.2339C76.2311 27.5061 75.5895 30.6429 74.4173 33.4969C73.208 36.4738 71.4312 39.1433 69.2472 41.3698C64.9285 45.7614 58.9687 48.4678 52.3919 48.4678C49.1714 48.4678 46.0866 47.8158 43.2733 46.6348C40.3489 45.4047 37.7207 43.6087 35.5243 41.3698C33.328 39.1433 31.5635 36.4738 30.3543 33.4969C29.1944 30.6429 28.5404 27.5061 28.5404 24.2339C28.5404 20.9617 29.182 17.8248 30.3543 14.9709C31.5635 11.9939 33.3403 9.32451 35.5243 7.09794C37.7207 4.87138 40.3489 3.06306 43.2733 1.83292C46.0866 0.651978 49.1591 0 52.3919 0L52.3796 0ZM38.8066 25.1442C38.313 25.1442 37.9181 24.7382 37.9181 24.2339C37.9181 23.7295 38.313 23.3236 38.8066 23.3236H51.4912V10.4316C51.4912 9.92728 51.886 9.52133 52.3796 9.52133C52.8732 9.52133 53.268 9.92728 53.268 10.4316V23.3236H65.9526C66.4462 23.3236 66.841 23.7295 66.841 24.2339C66.841 24.7382 66.4462 25.1442 65.9526 25.1442H53.268V38.0361C53.268 38.5405 52.8732 38.9464 52.3796 38.9464C51.886 38.9464 51.4912 38.5405 51.4912 38.0361V25.1442H38.8066ZM70.185 54.2987C69.7778 54.5816 69.2348 54.4832 68.951 54.0772C68.6672 53.6713 68.766 53.1054 69.1731 52.8225L85.288 41.3452C87.1759 40.0044 88.9528 39.9306 90.3101 40.4472C90.927 40.6809 91.4699 41.05 91.8895 41.4682C92.3214 41.8988 92.6422 42.4031 92.8273 42.9075C93.1357 43.7686 93.0494 44.642 92.4941 45.294L92.4571 45.3309L72.7638 65.5914C72.6898 65.6652 72.6158 65.7144 72.5417 65.7636L51.5282 76.7611C50.0598 77.5238 48.5915 78.0528 47.0861 78.3357C45.5684 78.6187 44.0137 78.6556 42.3849 78.471L14.2887 75.1742C13.7951 75.1127 13.4496 74.6699 13.5113 74.1778C13.573 73.6858 14.0049 73.329 14.4985 73.3782L42.5947 76.675C44.063 76.8473 45.445 76.8103 46.7776 76.5643C48.1103 76.3183 49.4182 75.8508 50.7262 75.1619L71.6163 64.2383L91.1861 44.1007C91.2602 43.99 91.2478 43.7809 91.1615 43.5472C91.0751 43.2889 90.89 43.0182 90.6556 42.7722C90.3964 42.5139 90.0756 42.2924 89.6931 42.1571C88.817 41.825 87.6448 41.8988 86.3122 42.846L70.1973 54.3233L70.185 54.2987ZM14.3381 49.9193C13.8692 50.0547 13.3756 49.7717 13.2399 49.292C13.1042 48.8122 13.388 48.3201 13.8568 48.1848C18.1138 46.9793 22.3338 46.2904 27.072 46.9424C31.6992 47.5821 36.7953 49.5011 42.8291 53.4868L58.6232 50.0055C60.0422 49.6979 61.1651 49.7471 62.0905 50.0547C63.0529 50.3745 63.7686 50.965 64.3115 51.6784C64.6817 52.1582 64.9285 52.6872 65.0519 53.253C65.1753 53.8189 65.1753 54.3971 65.0519 54.9875C64.9161 55.5903 64.6817 56.1193 64.3239 56.5744C63.9784 57.0296 63.5342 57.3986 62.9912 57.6693L45.6178 66.6124C45.1735 66.8339 44.643 66.6616 44.4209 66.2188C44.1988 65.7759 44.3715 65.2347 44.8157 65.0009L62.1892 56.0578C62.4853 55.8979 62.7321 55.701 62.9172 55.455C63.1023 55.209 63.238 54.926 63.3121 54.5939C63.3861 54.2618 63.3861 53.9419 63.3121 53.6344C63.2504 53.3391 63.1146 53.0439 62.9049 52.7733C62.5594 52.3304 62.1275 51.9614 61.5352 51.7646C60.9059 51.5554 60.0792 51.5185 58.9934 51.7646L42.8414 55.332C42.6193 55.3812 42.3726 55.332 42.1628 55.1967C36.2277 51.2356 31.292 49.3412 26.8253 48.7261C22.3832 48.111 18.373 48.7753 14.3257 49.9193H14.3381ZM2.91203 48.0126H9.40241C10.2045 48.0126 10.9325 48.3448 11.4507 48.886C11.9813 49.4273 12.3021 50.1654 12.3021 50.9773V73.9933C12.3021 75.3711 11.7468 76.6258 10.8584 77.5361C9.97001 78.4464 8.7361 79.0123 7.3788 79.0123H2.91203C2.10999 79.0123 1.38198 78.6802 0.8514 78.1512C0.826721 78.1266 0.814382 78.1143 0.802043 78.0897C0.308478 77.5607 0 76.8473 0 76.06V50.9896C0 50.1777 0.333156 49.4396 0.863739 48.8983C1.39432 48.3571 2.12233 48.0249 2.92437 48.0249L2.91203 48.0126ZM9.40241 49.8209H2.91203C2.60356 49.8209 2.31976 49.9562 2.10999 50.1531C1.91256 50.3622 1.77683 50.6451 1.77683 50.965V76.0354C1.77683 76.3306 1.88789 76.6135 2.07297 76.8103L2.10999 76.8472C2.31976 77.0564 2.60356 77.1794 2.91203 77.1794H7.3788C8.24254 77.1794 9.03224 76.8103 9.59984 76.2322C10.1674 75.654 10.5253 74.8544 10.5253 73.9687V50.9527C10.5253 50.6328 10.4019 50.3499 10.1921 50.1408C9.98235 49.9316 9.69855 49.8086 9.39008 49.8086L9.40241 49.8209ZM60.8196 3.50592C58.2283 2.41109 55.378 1.80832 52.3796 1.80832C49.3812 1.80832 46.5308 2.41109 43.9396 3.50592C41.2497 4.63765 38.8189 6.31065 36.7829 8.3773C34.747 10.4439 33.1059 12.9165 31.9954 15.6598C30.9219 18.2923 30.3296 21.1954 30.3296 24.2339C30.3296 27.2723 30.9219 30.1755 31.9954 32.808C33.1059 35.5512 34.747 38.0115 36.7829 40.0905C38.8189 42.1571 41.2497 43.8301 43.9396 44.9618C46.5308 46.0567 49.3812 46.6595 52.3796 46.6595C58.4751 46.6595 63.9907 44.15 67.9762 40.0905C70.0122 38.0238 71.6533 35.5512 72.7638 32.808C73.8373 30.1755 74.4296 27.2723 74.4296 24.2339C74.4296 21.1954 73.8373 18.2923 72.7638 15.6598C71.6533 12.9165 70.0122 10.4562 67.9762 8.3773C65.9403 6.31065 63.5095 4.63765 60.8196 3.50592Z\"/></mask><path d=\"M52.3796 0C55.6001 0 58.6849 0.651978 61.4982 1.83292C64.4226 3.06306 67.0508 4.85908 69.2472 7.09794C71.4435 9.32451 73.208 11.9939 74.4173 14.9709C75.5772 17.8248 76.2311 20.9617 76.2311 24.2339C76.2311 27.5061 75.5895 30.6429 74.4173 33.4969C73.208 36.4738 71.4312 39.1433 69.2472 41.3698C64.9285 45.7614 58.9687 48.4678 52.3919 48.4678C49.1714 48.4678 46.0866 47.8158 43.2733 46.6348C40.3489 45.4047 37.7207 43.6087 35.5243 41.3698C33.328 39.1433 31.5635 36.4738 30.3543 33.4969C29.1944 30.6429 28.5404 27.5061 28.5404 24.2339C28.5404 20.9617 29.182 17.8248 30.3543 14.9709C31.5635 11.9939 33.3403 9.32451 35.5243 7.09794C37.7207 4.87138 40.3489 3.06306 43.2733 1.83292C46.0866 0.651978 49.1591 0 52.3919 0L52.3796 0ZM38.8066 25.1442C38.313 25.1442 37.9181 24.7382 37.9181 24.2339C37.9181 23.7295 38.313 23.3236 38.8066 23.3236H51.4912V10.4316C51.4912 9.92728 51.886 9.52133 52.3796 9.52133C52.8732 9.52133 53.268 9.92728 53.268 10.4316V23.3236H65.9526C66.4462 23.3236 66.841 23.7295 66.841 24.2339C66.841 24.7382 66.4462 25.1442 65.9526 25.1442H53.268V38.0361C53.268 38.5405 52.8732 38.9464 52.3796 38.9464C51.886 38.9464 51.4912 38.5405 51.4912 38.0361V25.1442H38.8066ZM70.185 54.2987C69.7778 54.5816 69.2348 54.4832 68.951 54.0772C68.6672 53.6713 68.766 53.1054 69.1731 52.8225L85.288 41.3452C87.1759 40.0044 88.9528 39.9306 90.3101 40.4472C90.927 40.6809 91.4699 41.05 91.8895 41.4682C92.3214 41.8988 92.6422 42.4031 92.8273 42.9075C93.1357 43.7686 93.0494 44.642 92.4941 45.294L92.4571 45.3309L72.7638 65.5914C72.6898 65.6652 72.6158 65.7144 72.5417 65.7636L51.5282 76.7611C50.0598 77.5238 48.5915 78.0528 47.0861 78.3357C45.5684 78.6187 44.0137 78.6556 42.3849 78.471L14.2887 75.1742C13.7951 75.1127 13.4496 74.6699 13.5113 74.1778C13.573 73.6858 14.0049 73.329 14.4985 73.3782L42.5947 76.675C44.063 76.8473 45.445 76.8103 46.7776 76.5643C48.1103 76.3183 49.4182 75.8508 50.7262 75.1619L71.6163 64.2383L91.1861 44.1007C91.2602 43.99 91.2478 43.7809 91.1615 43.5472C91.0751 43.2889 90.89 43.0182 90.6556 42.7722C90.3964 42.5139 90.0756 42.2924 89.6931 42.1571C88.817 41.825 87.6448 41.8988 86.3122 42.846L70.1973 54.3233L70.185 54.2987ZM14.3381 49.9193C13.8692 50.0547 13.3756 49.7717 13.2399 49.292C13.1042 48.8122 13.388 48.3201 13.8568 48.1848C18.1138 46.9793 22.3338 46.2904 27.072 46.9424C31.6992 47.5821 36.7953 49.5011 42.8291 53.4868L58.6232 50.0055C60.0422 49.6979 61.1651 49.7471 62.0905 50.0547C63.0529 50.3745 63.7686 50.965 64.3115 51.6784C64.6817 52.1582 64.9285 52.6872 65.0519 53.253C65.1753 53.8189 65.1753 54.3971 65.0519 54.9875C64.9161 55.5903 64.6817 56.1193 64.3239 56.5744C63.9784 57.0296 63.5342 57.3986 62.9912 57.6693L45.6178 66.6124C45.1735 66.8339 44.643 66.6616 44.4209 66.2188C44.1988 65.7759 44.3715 65.2347 44.8157 65.0009L62.1892 56.0578C62.4853 55.8979 62.7321 55.701 62.9172 55.455C63.1023 55.209 63.238 54.926 63.3121 54.5939C63.3861 54.2618 63.3861 53.9419 63.3121 53.6344C63.2504 53.3391 63.1146 53.0439 62.9049 52.7733C62.5594 52.3304 62.1275 51.9614 61.5352 51.7646C60.9059 51.5554 60.0792 51.5185 58.9934 51.7646L42.8414 55.332C42.6193 55.3812 42.3726 55.332 42.1628 55.1967C36.2277 51.2356 31.292 49.3412 26.8253 48.7261C22.3832 48.111 18.373 48.7753 14.3257 49.9193H14.3381ZM2.91203 48.0126H9.40241C10.2045 48.0126 10.9325 48.3448 11.4507 48.886C11.9813 49.4273 12.3021 50.1654 12.3021 50.9773V73.9933C12.3021 75.3711 11.7468 76.6258 10.8584 77.5361C9.97001 78.4464 8.7361 79.0123 7.3788 79.0123H2.91203C2.10999 79.0123 1.38198 78.6802 0.8514 78.1512C0.826721 78.1266 0.814382 78.1143 0.802043 78.0897C0.308478 77.5607 0 76.8473 0 76.06V50.9896C0 50.1777 0.333156 49.4396 0.863739 48.8983C1.39432 48.3571 2.12233 48.0249 2.92437 48.0249L2.91203 48.0126ZM9.40241 49.8209H2.91203C2.60356 49.8209 2.31976 49.9562 2.10999 50.1531C1.91256 50.3622 1.77683 50.6451 1.77683 50.965V76.0354C1.77683 76.3306 1.88789 76.6135 2.07297 76.8103L2.10999 76.8472C2.31976 77.0564 2.60356 77.1794 2.91203 77.1794H7.3788C8.24254 77.1794 9.03224 76.8103 9.59984 76.2322C10.1674 75.654 10.5253 74.8544 10.5253 73.9687V50.9527C10.5253 50.6328 10.4019 50.3499 10.1921 50.1408C9.98235 49.9316 9.69855 49.8086 9.39008 49.8086L9.40241 49.8209ZM60.8196 3.50592C58.2283 2.41109 55.378 1.80832 52.3796 1.80832C49.3812 1.80832 46.5308 2.41109 43.9396 3.50592C41.2497 4.63765 38.8189 6.31065 36.7829 8.3773C34.747 10.4439 33.1059 12.9165 31.9954 15.6598C30.9219 18.2923 30.3296 21.1954 30.3296 24.2339C30.3296 27.2723 30.9219 30.1755 31.9954 32.808C33.1059 35.5512 34.747 38.0115 36.7829 40.0905C38.8189 42.1571 41.2497 43.8301 43.9396 44.9618C46.5308 46.0567 49.3812 46.6595 52.3796 46.6595C58.4751 46.6595 63.9907 44.15 67.9762 40.0905C70.0122 38.0238 71.6533 35.5512 72.7638 32.808C73.8373 30.1755 74.4296 27.2723 74.4296 24.2339C74.4296 21.1954 73.8373 18.2923 72.7638 15.6598C71.6533 12.9165 70.0122 10.4562 67.9762 8.3773C65.9403 6.31065 63.5095 4.63765 60.8196 3.50592Z\" fill=\"var(--wp--preset--color--alt-four)\"/><path d=\"M52.3796 0C55.6001 0 58.6849 0.651978 61.4982 1.83292C64.4226 3.06306 67.0508 4.85908 69.2472 7.09794C71.4435 9.32451 73.208 11.9939 74.4173 14.9709C75.5772 17.8248 76.2311 20.9617 76.2311 24.2339C76.2311 27.5061 75.5895 30.6429 74.4173 33.4969C73.208 36.4738 71.4312 39.1433 69.2472 41.3698C64.9285 45.7614 58.9687 48.4678 52.3919 48.4678C49.1714 48.4678 46.0866 47.8158 43.2733 46.6348C40.3489 45.4047 37.7207 43.6087 35.5243 41.3698C33.328 39.1433 31.5635 36.4738 30.3543 33.4969C29.1944 30.6429 28.5404 27.5061 28.5404 24.2339C28.5404 20.9617 29.182 17.8248 30.3543 14.9709C31.5635 11.9939 33.3403 9.32451 35.5243 7.09794C37.7207 4.87138 40.3489 3.06306 43.2733 1.83292C46.0866 0.651978 49.1591 0 52.3919 0L52.3796 0ZM38.8066 25.1442C38.313 25.1442 37.9181 24.7382 37.9181 24.2339C37.9181 23.7295 38.313 23.3236 38.8066 23.3236H51.4912V10.4316C51.4912 9.92728 51.886 9.52133 52.3796 9.52133C52.8732 9.52133 53.268 9.92728 53.268 10.4316V23.3236H65.9526C66.4462 23.3236 66.841 23.7295 66.841 24.2339C66.841 24.7382 66.4462 25.1442 65.9526 25.1442H53.268V38.0361C53.268 38.5405 52.8732 38.9464 52.3796 38.9464C51.886 38.9464 51.4912 38.5405 51.4912 38.0361V25.1442H38.8066ZM70.185 54.2987C69.7778 54.5816 69.2348 54.4832 68.951 54.0772C68.6672 53.6713 68.766 53.1054 69.1731 52.8225L85.288 41.3452C87.1759 40.0044 88.9528 39.9306 90.3101 40.4472C90.927 40.6809 91.4699 41.05 91.8895 41.4682C92.3214 41.8988 92.6422 42.4031 92.8273 42.9075C93.1357 43.7686 93.0494 44.642 92.4941 45.294L92.4571 45.3309L72.7638 65.5914C72.6898 65.6652 72.6158 65.7144 72.5417 65.7636L51.5282 76.7611C50.0598 77.5238 48.5915 78.0528 47.0861 78.3357C45.5684 78.6187 44.0137 78.6556 42.3849 78.471L14.2887 75.1742C13.7951 75.1127 13.4496 74.6699 13.5113 74.1778C13.573 73.6858 14.0049 73.329 14.4985 73.3782L42.5947 76.675C44.063 76.8473 45.445 76.8103 46.7776 76.5643C48.1103 76.3183 49.4182 75.8508 50.7262 75.1619L71.6163 64.2383L91.1861 44.1007C91.2602 43.99 91.2478 43.7809 91.1615 43.5472C91.0751 43.2889 90.89 43.0182 90.6556 42.7722C90.3964 42.5139 90.0756 42.2924 89.6931 42.1571C88.817 41.825 87.6448 41.8988 86.3122 42.846L70.1973 54.3233L70.185 54.2987ZM14.3381 49.9193C13.8692 50.0547 13.3756 49.7717 13.2399 49.292C13.1042 48.8122 13.388 48.3201 13.8568 48.1848C18.1138 46.9793 22.3338 46.2904 27.072 46.9424C31.6992 47.5821 36.7953 49.5011 42.8291 53.4868L58.6232 50.0055C60.0422 49.6979 61.1651 49.7471 62.0905 50.0547C63.0529 50.3745 63.7686 50.965 64.3115 51.6784C64.6817 52.1582 64.9285 52.6872 65.0519 53.253C65.1753 53.8189 65.1753 54.3971 65.0519 54.9875C64.9161 55.5903 64.6817 56.1193 64.3239 56.5744C63.9784 57.0296 63.5342 57.3986 62.9912 57.6693L45.6178 66.6124C45.1735 66.8339 44.643 66.6616 44.4209 66.2188C44.1988 65.7759 44.3715 65.2347 44.8157 65.0009L62.1892 56.0578C62.4853 55.8979 62.7321 55.701 62.9172 55.455C63.1023 55.209 63.238 54.926 63.3121 54.5939C63.3861 54.2618 63.3861 53.9419 63.3121 53.6344C63.2504 53.3391 63.1146 53.0439 62.9049 52.7733C62.5594 52.3304 62.1275 51.9614 61.5352 51.7646C60.9059 51.5554 60.0792 51.5185 58.9934 51.7646L42.8414 55.332C42.6193 55.3812 42.3726 55.332 42.1628 55.1967C36.2277 51.2356 31.292 49.3412 26.8253 48.7261C22.3832 48.111 18.373 48.7753 14.3257 49.9193H14.3381ZM2.91203 48.0126H9.40241C10.2045 48.0126 10.9325 48.3448 11.4507 48.886C11.9813 49.4273 12.3021 50.1654 12.3021 50.9773V73.9933C12.3021 75.3711 11.7468 76.6258 10.8584 77.5361C9.97001 78.4464 8.7361 79.0123 7.3788 79.0123H2.91203C2.10999 79.0123 1.38198 78.6802 0.8514 78.1512C0.826721 78.1266 0.814382 78.1143 0.802043 78.0897C0.308478 77.5607 0 76.8473 0 76.06V50.9896C0 50.1777 0.333156 49.4396 0.863739 48.8983C1.39432 48.3571 2.12233 48.0249 2.92437 48.0249L2.91203 48.0126ZM9.40241 49.8209H2.91203C2.60356 49.8209 2.31976 49.9562 2.10999 50.1531C1.91256 50.3622 1.77683 50.6451 1.77683 50.965V76.0354C1.77683 76.3306 1.88789 76.6135 2.07297 76.8103L2.10999 76.8472C2.31976 77.0564 2.60356 77.1794 2.91203 77.1794H7.3788C8.24254 77.1794 9.03224 76.8103 9.59984 76.2322C10.1674 75.654 10.5253 74.8544 10.5253 73.9687V50.9527C10.5253 50.6328 10.4019 50.3499 10.1921 50.1408C9.98235 49.9316 9.69855 49.8086 9.39008 49.8086L9.40241 49.8209ZM60.8196 3.50592C58.2283 2.41109 55.378 1.80832 52.3796 1.80832C49.3812 1.80832 46.5308 2.41109 43.9396 3.50592C41.2497 4.63765 38.8189 6.31065 36.7829 8.3773C34.747 10.4439 33.1059 12.9165 31.9954 15.6598C30.9219 18.2923 30.3296 21.1954 30.3296 24.2339C30.3296 27.2723 30.9219 30.1755 31.9954 32.808C33.1059 35.5512 34.747 38.0115 36.7829 40.0905C38.8189 42.1571 41.2497 43.8301 43.9396 44.9618C46.5308 46.0567 49.3812 46.6595 52.3796 46.6595C58.4751 46.6595 63.9907 44.15 67.9762 40.0905C70.0122 38.0238 71.6533 35.5512 72.7638 32.808C73.8373 30.1755 74.4296 27.2723 74.4296 24.2339C74.4296 21.1954 73.8373 18.2923 72.7638 15.6598C71.6533 12.9165 70.0122 10.4562 67.9762 8.3773C65.9403 6.31065 63.5095 4.63765 60.8196 3.50592Z\"  stroke-width=\"0.5\" mask=\"url(#path-1-outside-1_719_114)\"/></g><defs><clipPath id=\"clip0_719_114\"><rect width=\"93\" height=\"79\" fill=\"white\"/></clipPath></defs></svg>' },\n  ];\n\n  \n\n  return (\n    <>\n      <InspectorControls>\n        {/* You can add control panels here if needed */}\n        <PanelBody title={__('Settings', 'big-card')}>\n          <SelectControl\n            label={__('SVG Icon', 'big-card')}\n            value={attributes.svgIcon}\n            options={svgs}\n            onChange={(value) => setAttributes({ svgIcon: value })}\n          />\n\n          <ColorPalette\n            label={__('Background Color', 'big-card')}\n            value={attributes.backgroundColor}\n            onChange={(value) => setAttributes({ backgroundColor: value })}\n            colors={colorPalette}\n            enableAlpha={false}\n            clearable={true}\n          />\n\n          {/* Field For Text */}\n          <TextControl label={__('Link Text', 'big-card')} value={attributes.linkText} onChange={(value) => setAttributes({ linkText: value })} />\n          {/* Field For Link */}\n          <TextControl label={__('Link URL', 'big-card')} value={attributes.linkURL} onChange={(value) => setAttributes({ linkURL: value })} />\n          {/* Color Picker for Background Color */}\n          \n\n          <TextControl label={__('Card Description', 'big-card')} value={attributes.cardDescription} onChange={(value) => setAttributes({ cardDescription: value })} />\n        </PanelBody>\n      </InspectorControls>\n\n      <a href='' { ...useBlockProps({ className: 'icon-card', style: { '--card-color': attributes.backgroundColor } }) } onClick={(e) => e.preventDefault()}>\n        {attributes.svgIcon ? (<span class='icon-card__icon' dangerouslySetInnerHTML={{ __html: attributes.svgIcon }}></span>\n        ) : null}\n        \n\n        <span>\n          {attributes.linkText || __('Link Card', 'big-card')}\n        </span> \n\n        <p class='icon-card__description'>\n          {attributes.cardDescription || __('This is a description for the link card. You can edit this text to provide more details about the link.', 'big-card')}\n        </p>\n      </a>\n    </>\n  );\n}\n\n","// extracted by mini-css-extract-plugin\nexport {};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport './style.scss';\n\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\nimport Save from './save';\nimport metadata from './block.json';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nregisterBlockType( metadata.name, {\n\t/**\n\t * @see ./edit.js\n\t */\n\tedit: Edit,\n\tsave: Save\n} );\n","/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\nimport { __ } from '@wordpress/i18n';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @return {Element} Element to render.\n */\nexport default function save({ attributes }) {\n  const { backgroundColor, svgIcon, linkText, linkURL, cardDescription } = attributes;\n\n  const blockProps = useBlockProps.save({\n    className: 'icon-card',\n    style: { '--card-color': backgroundColor }\n  });\n\n  return (\n    <a href={linkURL} {...blockProps}>\n      <span class='icon-card__icon' dangerouslySetInnerHTML={{ __html: svgIcon }}></span>\n\n      <span>\n        {linkText || __('Link Card', 'big-card')}\n      </span>\n      <p class='icon-card__description'>\n        {cardDescription || __('This is a description for the link card. You can edit this text to provide more details about the link.', 'big-card')}\n      </p>\n    </a>\n  );\n}","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"big-card/index\": 0,\n\t\"big-card/style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkinteractive_map\"] = globalThis[\"webpackChunkinteractive_map\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"big-card/style-index\"], () => (__webpack_require__(\"./src/big-card/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["__","useBlockProps","InspectorControls","withColorContext","useSetting","PanelBody","ToggleControl","SelectControl","TextControl","ColorPalette","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Edit","props","attributes","setAttributes","tabNumber","backgroundColor","colorPalette","name","slug","color","svgs","label","value","children","title","svgIcon","options","onChange","colors","enableAlpha","clearable","linkText","linkURL","cardDescription","href","className","style","onClick","e","preventDefault","class","dangerouslySetInnerHTML","__html","registerBlockType","Save","metadata","edit","save","blockProps"],"sourceRoot":""}